# Sync gateway pod
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-geoserver
  namespace: {{ .Release.Namespace }}
spec:
  # This pod can NOT be scaled, because it persists local files
  replicas: 1
  strategy:
    # Need to kill previous pods before running new ones to avoid double-attaching volumes...
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: geoserver
      app.kubernetes.io/instance: {{ .Release.Name }}

  template:
    metadata:
      annotations:
        # Add a checksum to force the re-creation of the pods on every config update
        checksum/conf: {{ .Values.geonode.extraConf | sha256sum }}
        checksum/conf2: {{ .Values.geonode.extraConf2 | sha256sum }}
        checksum/nginx: {{ include "nginx_conf" . | sha256sum }}
      labels:
        app.kubernetes.io/name: geoserver
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      securityContext:
        fsGroup: {{ .Values.general.gid }}
      # Resolving some hardcoded links...
      initContainers:
      - name: busybox
        image: registry.uninett.no/public/busybox:1.33.1-glibc
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsUser: {{ .Values.general.uid }}
          runAsGroup: {{ .Values.general.gid }}
        args:
          - /bin/sh
          - -c
          - -x
          - "mkdir -p  /geonode/geoserver-data-dir && \
            chmod g+wx /geonode/geoserver-data-dir"
        volumeMounts:
        - name: persistence
          mountPath: /geonode
          subPath: geonode
      # Initialize default data
      # The tag NEEDS to match with the geoserver tag
      # See https://hub.docker.com/r/geonode/geoserver
      - name: data-dir-conf
        image: geonode/geoserver_data:{{ .Values.geoserver.image.tag }}
        command:
        - sh
        - -c
        - |
          # Copy defaults from data container
          cp -r /tmp/geonode/downloaded/data /geoserver_data

          # Copy overrides from Secrets, can't mount file directly
          cp /secrets/notifier.xml /geoserver_data/data/notifier/
          cp /secrets/config.xml /geoserver_data/data/security/filter/geonode-oauth2/

          # Update custom EPSG codes
          cat /geoserver_data/data/user_projections/epsg.properties > /tmp/epsg.properties
          {{- range .Values.geoserver.customEPSGs }}
          echo '{{ . }}' >> /tmp/epsg.properties
          {{- end }}
          {{- range .Values.geoserver.extraCustomEPSGs }}
          echo '{{ . }}' >> /tmp/epsg.properties
          {{- end }}
          sort -u /tmp/epsg.properties > /geoserver_data/data/user_projections/epsg.properties
        volumeMounts:
        - name: persistence
          mountPath: /geoserver_data/data
          subPath: geonode/geoserver-data-dir
        - name: geoserver-secrets
          mountPath: /secrets
      containers:
      - name: geoserver
        image: "{{ .Values.geoserver.image.name }}:{{ .Values.geoserver.image.tag }}"
        command:
        - sh
        - -c
        - |
          echo "###### FIXING GEOSERVER ADMIN PASSWORD ####"
          ADMIN_ENCRYPTED_PASSWORD=$(/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/bin/java -classpath /usr/local/tomcat/webapps/geoserver/WEB-INF/lib/jasypt-1.9.2.jar org.jasypt.intf.cli.JasyptStringDigestCLI digest.sh algorithm=SHA-256 saltSizeBytes=16 iterations=100000 input="$GEOSERVER_ADMIN_PASSWORD" verbose=0 | tr -d '\n')
          sed -i -r "s|<user enabled=\".*\" name=\".*\" password=\".*\"/>|<user enabled=\"true\" name=\"$GEOSERVER_ADMIN_USER\" password=\"digest1:$ADMIN_ENCRYPTED_PASSWORD\"/>|" "/geoserver_data/data/security/usergroup/default/users.xml"
          sed -i -r "s|<userRoles username=\".*\">|<userRoles username=\"$GEOSERVER_ADMIN_USER\">|" "/geoserver_data/data/security/role/default/roles.xml"
          ADMIN_ENCRYPTED_PASSWORD=""

          echo "###### FIXING GEOSERVER PUBLIC URL ########"
          sed -i "s#http://geonode:80#{{ include "public_url" . }}#g" /usr/local/tomcat/tmp/entrypoint.sh
          /usr/local/tomcat/tmp/entrypoint.sh
        ports:
        - containerPort: 8080
        env:
        - name: GEOSERVER_ADMIN_USER
          value: admin
        - name: GEOSERVER_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secrets
              key: GEOSERVER_ADMIN_PASSWORD
        - name: GEONODE_LB_PORT
          value: {{ .Values.general.externalPort | quote }}
        - name: GEONODE_HOST_IP
          value: {{ .Release.Name }}-geonode
        - name: PUBLIC_PORT
          value: {{ .Values.general.externalPort | quote }}
        - name: DJANGO_URL
          value: http://{{ .Release.Name }}-geonode/
        - name: ENABLE_JSONP
          value: 'true'
        - name: outFormat
          value: text/javascript
        - name: GEOSERVER_JAVA_OPTS
          value: -Djava.awt.headless=true -Xms2G -Xmx4G -XX:PerfDataSamplingInterval=500 -XX:SoftRefLRUPolicyMSPerMB=36000 -XX:-UseGCOverheadLimit -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:ParallelGCThreads=4 -Dfile.encoding=UTF8 -Djavax.servlet.request.encoding=UTF-8 -Djavax.servlet.response.encoding=UTF-8 -Duser.timezone=GMT -Dorg.geotools.shapefile.datetime=false -DGEOSERVER_CSRF_DISABLED=true -DPRINT_BASE_URL=http://localhost:8080/geoserver/pdf
        - name: NGINX_BASE_URL
          value: "{{ include "public_url" . }}/"
        volumeMounts:
        - name: persistence
          mountPath: /geoserver_data/data
          subPath: geonode/geoserver-data-dir
        - name: persistence
          mountPath: /geoserver_data/data/{{ .Release.Name }}-geoserver-data
          subPath: data/{{ .Release.Name }}-geoserver-data
        - name: persistence
          mountPath: /backup-restore
          subPath: data/backup-restore
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 5
          failureThreshold: 15
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 180
          periodSeconds: 5
          failureThreshold: 15
        resources:
{{toYaml .Values.geoserver.resources | indent 11}}
      volumes:
      - name: geoserver-secrets
        secret:
          secretName: {{ .Release.Name }}-geoserver-secrets
      - name: persistence
        persistentVolumeClaim:
          claimName: {{ .Values.storage.claimName }}